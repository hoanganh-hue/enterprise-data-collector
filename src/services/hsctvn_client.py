"""
HSCTVN Client Enhanced - Phi√™n b·∫£n n√¢ng c·∫•p ho√†n ch·ªânh
Tr√≠ch xu·∫•t ƒë·∫ßy ƒë·ªß th√¥ng tin doanh nghi·ªáp t·ª´ hsctvn.com bao g·ªìm ƒë·ªãa ch·ªâ
"""
import asyncio
import re
import json
from typing import Dict, Optional, Any
from playwright.async_api import async_playwright

class HSCTVNEnhanced:
    """Client n√¢ng c·∫•p ƒë·ªÉ tr√≠ch xu·∫•t ƒë·∫ßy ƒë·ªß th√¥ng tin doanh nghi·ªáp"""
    
    def __init__(self):
        self.base_url = "https://hsctvn.com"
        
    async def search_company(self, tax_code: str) -> Optional[Dict[str, Any]]:
        """T√¨m ki·∫øm th√¥ng tin c√¥ng ty theo m√£ s·ªë thu·∫ø"""
        print(f"üîç T√¨m ki·∫øm MST: {tax_code}")
        
        async with async_playwright() as pw:
            browser = await pw.chromium.launch(headless=True)
            context = await browser.new_context(
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            )
            page = await context.new_page()
            
            try:
                # 1. Truy c·∫≠p trang ch·ªß
                print("   üåê Truy c·∫≠p hsctvn.com...")
                await page.goto(self.base_url, timeout=30000)
                await page.wait_for_load_state("domcontentloaded")
                await page.wait_for_timeout(2000)
                
                # 2. T√¨m ki·∫øm
                print(f"   üîç T√¨m ki·∫øm MST {tax_code}...")
                search_input = await page.query_selector("input[name='key']")
                if not search_input:
                    print("   ‚ùå Kh√¥ng t√¨m th·∫•y √¥ t√¨m ki·∫øm")
                    return None
                
                await search_input.fill(tax_code)
                await page.wait_for_timeout(1000)
                
                # Submit form
                submit_btn = await page.query_selector("input[type='submit']")
                if submit_btn:
                    await submit_btn.click()
                else:
                    await search_input.press("Enter")
                
                # 3. Ch·ªù k·∫øt qu·∫£
                print("   ‚è≥ Ch·ªù k·∫øt qu·∫£...")
                await page.wait_for_load_state("domcontentloaded")
                await page.wait_for_timeout(3000)
                
                # 4. T√¨m link k·∫øt qu·∫£ ch√≠nh x√°c v·ªõi MST
                result_link = await self._find_exact_result_link(page, tax_code)
                
                if result_link:
                    href = await result_link.get_attribute("href")
                    full_url = self._normalize_url(href)
                    
                    print(f"   üîó Truy c·∫≠p chi ti·∫øt: {full_url}")
                    await page.goto(full_url, timeout=30000)
                    await page.wait_for_load_state("domcontentloaded")
                    await page.wait_for_timeout(3000)
                else:
                    print("   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y link ch√≠nh x√°c, th·ª≠ tr√≠ch xu·∫•t t·ª´ trang hi·ªán t·∫°i")
                
                # 5. Tr√≠ch xu·∫•t th√¥ng tin v·ªõi ph∆∞∆°ng ph√°p c·∫£i ti·∫øn
                print("   üìä Tr√≠ch xu·∫•t th√¥ng tin n√¢ng c·∫•p...")
                company_info = await self._extract_enhanced_info(page, tax_code)
                
                # Screenshot ƒë·ªÉ debug
                await page.screenshot(path=f"enhanced_result_{tax_code}.png")
                print(f"   üì∏ Screenshot: enhanced_result_{tax_code}.png")
                
                return company_info
                
            except Exception as e:
                print(f"   ‚ùå L·ªói: {e}")
                await page.screenshot(path=f"enhanced_error_{tax_code}.png")
                return None
            finally:
                await browser.close()
    
    async def _find_exact_result_link(self, page, tax_code: str):
        """T√¨m link k·∫øt qu·∫£ ch√≠nh x√°c cho MST"""
        try:
            # T√¨m t·∫•t c·∫£ links trong b·∫£ng k·∫øt qu·∫£
            links = await page.query_selector_all("table a, .search-result a, a[href*='cong-ty']")
            
            for link in links:
                try:
                    href = await link.get_attribute("href")
                    text = await link.inner_text()
                    
                    # T√¨m link c√≥ ch·ª©a MST trong href ho·∫∑c text
                    if href and (tax_code in href or tax_code in text):
                        if "cong-ty" in href and "danh-sach" not in href:
                            print(f"   ‚úÖ T√¨m th·∫•y link ch√≠nh x√°c: {href}")
                            return link
                    
                    # Ho·∫∑c t√¨m link trong c√πng row v·ªõi MST
                    parent_row = await link.evaluate_handle("""
                        element => element.closest('tr')
                    """)
                    
                    if parent_row:
                        row_text = await parent_row.inner_text()
                        if tax_code in row_text:
                            if "cong-ty" in href and "danh-sach" not in href:
                                print(f"   ‚úÖ T√¨m th·∫•y link trong row ch·ª©a MST: {href}")
                                return link
                    
                except:
                    continue
            
            # Fallback: l·∫•y link ƒë·∫ßu ti√™n n·∫øu c√≥
            first_company_link = await page.query_selector("a[href*='cong-ty']:not([href*='danh-sach'])")
            if first_company_link:
                href = await first_company_link.get_attribute("href")
                print(f"   ‚ö†Ô∏è S·ª≠ d·ª•ng link ƒë·∫ßu ti√™n: {href}")
                return first_company_link
            
            return None
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è L·ªói t√¨m link: {e}")
            return None
    
    def _normalize_url(self, href: str) -> str:
        """Chu·∫©n h√≥a URL"""
        if href.startswith("/"):
            return f"{self.base_url}{href}"
        elif href.startswith("http"):
            return href
        else:
            return f"{self.base_url}/{href}"
    
    async def _extract_enhanced_info(self, page, tax_code: str) -> Dict[str, Any]:
        """Tr√≠ch xu·∫•t th√¥ng tin v·ªõi ph∆∞∆°ng ph√°p n√¢ng c·∫•p"""
        company_info = {
            'ma_so_thue': tax_code,
            'ten_cong_ty': '',
            'dia_chi_thue': '',
            'dai_dien_phap_luat': '',
            'dien_thoai': '',
            'email': '',
            'ngay_cap': '',
            'nganh_nghe_chinh': '',
            'trang_thai': '',
            'cap_nhat_lan_cuoi': '',
            'nganh_nghe_kinh_doanh_chi_tiet': []
        }
        
        try:
            # L·∫•y to√†n b·ªô text c·ªßa trang ƒë·ªÉ ph√¢n t√≠ch
            full_text = await page.inner_text("body")
            
            # 1. Tr√≠ch xu·∫•t t√™n c√¥ng ty t·ª´ ti√™u ƒë·ªÅ
            await self._extract_company_name(page, company_info)
            
            # 2. Tr√≠ch xu·∫•t th√¥ng tin t·ª´ text pattern (ph∆∞∆°ng ph√°p m·ªõi)
            await self._extract_info_from_text_patterns(full_text, company_info)
            
            # 3. Tr√≠ch xu·∫•t t·ª´ b·∫£ng (ph∆∞∆°ng ph√°p c≈© v·∫´n gi·ªØ ƒë·ªÉ b·ªï sung)
            await self._extract_detailed_table_info(page, company_info)
            
            # 4. Tr√≠ch xu·∫•t th√¥ng tin li√™n h·ªá
            await self._extract_contact_info(page, company_info)
            
            # 5. Tr√≠ch xu·∫•t ng√†nh ngh·ªÅ
            await self._extract_main_business_activity(page, company_info)
            
            # 6. Validate v√† l√†m s·∫°ch d·ªØ li·ªáu
            self._validate_and_clean_final(company_info, tax_code)
            
            return company_info
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è L·ªói tr√≠ch xu·∫•t: {e}")
            return company_info
    
    async def _extract_info_from_text_patterns(self, full_text: str, company_info: Dict[str, Any]):
        """Ph∆∞∆°ng ph√°p m·ªõi: tr√≠ch xu·∫•t th√¥ng tin t·ª´ text patterns"""
        try:
            lines = full_text.split('\n')
            
            for i, line in enumerate(lines):
                line_clean = line.strip()
                if not line_clean:
                    continue
                
                # ƒê·ªãa ch·ªâ thu·∫ø - pattern m·ªõi
                if 'ƒë·ªãa ch·ªâ thu·∫ø:' in line_clean.lower():
                    address_match = re.search(r'ƒë·ªãa ch·ªâ thu·∫ø:\s*(.+)', line_clean, re.IGNORECASE)
                    if address_match:
                        address = address_match.group(1).strip()
                        if len(address) > 5:  # ƒêi·ªÅu ki·ªán √≠t kh·∫Øt khe h∆°n
                            company_info['dia_chi_thue'] = address
                            print(f"   ‚úÖ ƒê·ªãa ch·ªâ thu·∫ø: {address}")
                
                # ƒê·∫°i di·ªán ph√°p lu·∫≠t
                elif 'ƒë·∫°i di·ªán ph√°p lu·∫≠t:' in line_clean.lower():
                    rep_match = re.search(r'ƒë·∫°i di·ªán ph√°p lu·∫≠t:\s*(.+)', line_clean, re.IGNORECASE)
                    if rep_match:
                        rep = rep_match.group(1).strip()
                        if len(rep) > 2 and not any(char.isdigit() for char in rep):
                            company_info['dai_dien_phap_luat'] = rep
                            print(f"   ‚úÖ ƒê·∫°i di·ªán ph√°p lu·∫≠t: {rep}")
                
                # ƒêi·ªán tho·∫°i
                elif 'ƒëi·ªán tho·∫°i:' in line_clean.lower():
                    phone_match = re.search(r'ƒëi·ªán tho·∫°i:\s*(.+)', line_clean, re.IGNORECASE)
                    if phone_match:
                        phone_text = phone_match.group(1).strip()
                        phone = self._extract_valid_phone(phone_text)
                        if phone and phone != company_info['ma_so_thue']:
                            company_info['dien_thoai'] = phone
                            print(f"   ‚úÖ ƒêi·ªán tho·∫°i: {phone}")
                
                # Ng√†y c·∫•p
                elif 'ng√†y c·∫•p:' in line_clean.lower():
                    date_match = re.search(r'ng√†y c·∫•p:\s*(.+)', line_clean, re.IGNORECASE)
                    if date_match:
                        date_text = date_match.group(1).strip()
                        if self._is_valid_date(date_text):
                            company_info['ngay_cap'] = date_text
                            print(f"   ‚úÖ Ng√†y c·∫•p: {date_text}")
                
                # Ng√†nh ngh·ªÅ ch√≠nh
                elif 'ng√†nh ngh·ªÅ ch√≠nh:' in line_clean.lower():
                    business_match = re.search(r'ng√†nh ngh·ªÅ ch√≠nh:\s*(.+)', line_clean, re.IGNORECASE)
                    if business_match:
                        business = business_match.group(1).strip()
                        if len(business) > 5:
                            company_info['nganh_nghe_chinh'] = business
                            print(f"   ‚úÖ Ng√†nh ngh·ªÅ ch√≠nh: {business}")
                
                # Tr·∫°ng th√°i  
                elif 'tr·∫°ng th√°i:' in line_clean.lower():
                    status_match = re.search(r'tr·∫°ng th√°i:\s*(.+)', line_clean, re.IGNORECASE)
                    if status_match:
                        status = status_match.group(1).strip()
                        company_info['trang_thai'] = status
                        print(f"   ‚úÖ Tr·∫°ng th√°i: {status}")
                
                # T√¨m c√°c pattern kh√°c t·ª´ c√°c d√≤ng li·ªÅn k·ªÅ
                elif any(keyword in line_clean.lower() for keyword in ['s·ªë', 'l√¥', 'ƒë∆∞·ªùng', 'ph∆∞·ªùng', 'qu·∫≠n', 'th√†nh ph·ªë', 't·ªânh']):
                    # C√≥ th·ªÉ l√† ƒë·ªãa ch·ªâ n·∫øu ch∆∞a c√≥
                    if not company_info['dia_chi_thue'] and len(line_clean) > 15:
                        # Ki·ªÉm tra xem c√≥ ph·∫£i l√† ƒë·ªãa ch·ªâ kh√¥ng
                        if self._looks_like_address(line_clean):
                            company_info['dia_chi_thue'] = line_clean
                            print(f"   ‚úÖ ƒê·ªãa ch·ªâ (pattern): {line_clean}")
        
        except Exception as e:
            print(f"   ‚ö†Ô∏è L·ªói tr√≠ch xu·∫•t t·ª´ text: {e}")
    
    def _looks_like_address(self, text: str) -> bool:
        """Ki·ªÉm tra xem text c√≥ gi·ªëng ƒë·ªãa ch·ªâ kh√¥ng"""
        address_indicators = ['s·ªë', 'l√¥', 'ƒë∆∞·ªùng', 'ph∆∞·ªùng', 'qu·∫≠n', 'th√†nh ph·ªë', 't·ªânh', 'x√£', 'huy·ªán']
        text_lower = text.lower()
        
        # Ph·∫£i c√≥ √≠t nh·∫•t 2 indicator
        count = sum(1 for indicator in address_indicators if indicator in text_lower)
        
        # Kh√¥ng ƒë∆∞·ª£c ch·ª©a c√°c t·ª´ kh√¥ng ph·∫£i ƒë·ªãa ch·ªâ
        non_address = ['m√£ s·ªë thu·∫ø', 'ƒëi·ªán tho·∫°i', 'email', 'ng√†y', 'nƒÉm', 'th√°ng']
        has_non_address = any(word in text_lower for word in non_address)
        
        return count >= 2 and not has_non_address and len(text) > 15
    
    async def _extract_company_name(self, page, company_info: Dict[str, Any]):
        """Tr√≠ch xu·∫•t t√™n c√¥ng ty t·ª´ c√°c ngu·ªìn ƒë√°ng tin c·∫≠y"""
        try:
            # Th·ª© t·ª± ∆∞u ti√™n: h1 -> title -> h2
            selectors = ['h1', 'title', 'h2', '.company-name', '.title']
            
            for selector in selectors:
                try:
                    if selector == 'title':
                        text = await page.title()
                    else:
                        element = await page.query_selector(selector)
                        if element:
                            text = await element.inner_text()
                        else:
                            continue
                    
                    if text and len(text.strip()) > 5:
                        # L√†m s·∫°ch t√™n c√¥ng ty
                        clean_name = self._clean_company_name(text.strip())
                        if clean_name:
                            company_info['ten_cong_ty'] = clean_name
                            print(f"   ‚úÖ T√™n c√¥ng ty: {clean_name}")
                            return
                except:
                    continue
                    
        except Exception as e:
            print(f"   ‚ö†Ô∏è L·ªói tr√≠ch xu·∫•t t√™n: {e}")
    
    def _clean_company_name(self, text: str) -> str:
        """L√†m s·∫°ch t√™n c√¥ng ty"""
        # Lo·∫°i b·ªè c√°c ti·ªÅn t·ªë kh√¥ng c·∫ßn thi·∫øt
        text = re.sub(r'^(Th√¥ng tin|Chi ti·∫øt|Detail|Info|Company)\s*[:]\s*', '', text, flags=re.IGNORECASE)
        
        # Lo·∫°i b·ªè th√¥ng tin website
        text = re.sub(r'\s*-[^-]*hsctvn[^-]*$', '', text, flags=re.IGNORECASE)
        
        # Lo·∫°i b·ªè th√¥ng tin s·ªë l∆∞·ª£ng h·ªì s∆°
        text = re.sub(r'\s*\|\s*\d+[,.\s]*\d*\s*h·ªì s∆°.*$', '', text, flags=re.IGNORECASE)
        
        return text.strip()
    
    async def _extract_detailed_table_info(self, page, company_info: Dict[str, Any]):
        """Tr√≠ch xu·∫•t th√¥ng tin chi ti·∫øt t·ª´ b·∫£ng (ph∆∞∆°ng ph√°p c≈© ƒë·ªÉ b·ªï sung)"""
        try:
            main_tables = await page.query_selector_all("table")
            
            for table in main_tables:
                rows = await table.query_selector_all("tr")
                
                for row in rows:
                    cells = await row.query_selector_all("td, th")
                    if len(cells) >= 2:
                        try:
                            label_elem = cells[0]
                            value_elem = cells[1]
                            
                            label = await label_elem.inner_text()
                            value = await value_elem.inner_text()
                            
                            self._map_table_field(label.strip(), value.strip(), company_info)
                            
                        except:
                            continue
        
        except Exception as e:
            print(f"   ‚ö†Ô∏è L·ªói tr√≠ch xu·∫•t b·∫£ng: {e}")
    
    def _map_table_field(self, label: str, value: str, company_info: Dict[str, Any]):
        """Map field t·ª´ b·∫£ng v√†o company_info v·ªõi ƒëi·ªÅu ki·ªán √≠t kh·∫Øt khe h∆°n"""
        if not label or not value or len(value) < 2:
            return
        
        label_lower = label.lower().strip()
        value_clean = value.strip()
        
        # ƒê·ªãa ch·ªâ v·ªõi ƒëi·ªÅu ki·ªán √≠t kh·∫Øt khe h∆°n
        if any(kw in label_lower for kw in ['ƒë·ªãa ch·ªâ', 'address']) and len(value_clean) > 10:
            if not company_info['dia_chi_thue']:  # Ch·ªâ set n·∫øu ch∆∞a c√≥
                company_info['dia_chi_thue'] = value_clean
                print(f"   ‚úÖ ƒê·ªãa ch·ªâ (b·∫£ng): {value_clean}")
        
        # ƒê·∫°i di·ªán ph√°p lu·∫≠t
        elif any(kw in label_lower for kw in ['ƒë·∫°i di·ªán ph√°p lu·∫≠t', 'gi√°m ƒë·ªëc', 'legal representative', 'director']):
            if len(value_clean) > 2 and not any(char.isdigit() for char in value_clean):
                if not company_info['dai_dien_phap_luat']:
                    company_info['dai_dien_phap_luat'] = value_clean
                    print(f"   ‚úÖ ƒê·∫°i di·ªán (b·∫£ng): {value_clean}")
        
        # ƒêi·ªán tho·∫°i
        elif any(kw in label_lower for kw in ['ƒëi·ªán tho·∫°i', 'phone', 'tel', 'fax']):
            phone = self._extract_valid_phone(value_clean)
            if phone and not company_info['dien_thoai']:
                company_info['dien_thoai'] = phone
                print(f"   ‚úÖ ƒêi·ªán tho·∫°i (b·∫£ng): {phone}")
    
    def _extract_valid_phone(self, text: str) -> str:
        """Tr√≠ch xu·∫•t s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá v·ªõi logic chu·∫©n h√≥a"""
        if not text:
            return ""
        
        # X√≥a spaces v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
        text_clean = re.sub(r'[^\d+]', ' ', text)
        
        # T√¨m pattern s·ªë ƒëi·ªán tho·∫°i Vi·ªát Nam c·ª• th·ªÉ
        phone_patterns = [
            # S·ªë di ƒë·ªông: 09x, 08x, 07x, 05x, 03x (10-11 s·ªë)
            r'(0[3579])[0-9]{8}',
            # S·ªë c·ªë ƒë·ªãnh H√† N·ªôi: 024 + 8 s·ªë
            r'(024)[0-9]{8}',
            # S·ªë c·ªë ƒë·ªãnh TP.HCM: 028 + 8 s·ªë  
            r'(028)[0-9]{8}',
            # S·ªë c·ªë ƒë·ªãnh kh√°c: 02xx + 7-8 s·ªë
            r'(02[0-9])[0-9]{7,8}',
            # International format
            r'(\+84[3579])[0-9]{8}',
        ]
        
        found_phones = []
        
        for pattern in phone_patterns:
            matches = re.findall(pattern, text_clean)
            for match in matches:
                cleaned = re.sub(r'[^\d+]', '', match)
                
                # Ki·ªÉm tra kh√¥ng ph·∫£i MST 
                if cleaned.startswith('010') or cleaned.startswith('011') or cleaned.startswith('012'):
                    continue
                    
                # Ki·ªÉm tra kh√¥ng ph·∫£i nƒÉm
                if len(cleaned) == 4 and cleaned.startswith('20'):
                    continue
                
                # Ki·ªÉm tra ƒë·ªô d√†i h·ª£p l·ªá
                if 9 <= len(cleaned) <= 12:
                    found_phones.append(cleaned)
        
        # ∆Øu ti√™n s·ªë di ƒë·ªông (03, 05, 07, 08, 09)
        for phone in found_phones:
            if phone.startswith(('03', '05', '07', '08', '09')):
                return phone
        
        # Fallback: s·ªë c·ªë ƒë·ªãnh
        for phone in found_phones:
            if phone.startswith('02'):
                return phone
                
        return ""
    
    def _is_valid_date(self, text: str) -> bool:
        """Ki·ªÉm tra xem c√≥ ph·∫£i ng√†y th√°ng h·ª£p l·ªá kh√¥ng"""
        date_patterns = [
            r'\d{1,2}[/\-\.]\d{1,2}[/\-\.]\d{4}',
            r'\d{4}[/\-\.]\d{1,2}[/\-\.]\d{1,2}'
        ]
        
        for pattern in date_patterns:
            if re.search(pattern, text):
                return True
        
        return False
    
    async def _extract_contact_info(self, page, company_info: Dict[str, Any]):
        """Tr√≠ch xu·∫•t th√¥ng tin li√™n h·ªá t·ª´ to√†n b·ªô trang"""
        try:
            full_text = await page.inner_text("body")
            
            # T√¨m email
            if not company_info['email']:
                email_pattern = r'[\w\.-]+@[\w\.-]+\.\w+'
                emails = re.findall(email_pattern, full_text)
                if emails:
                    # L·ªçc email h·ª£p l·ªá (kh√¥ng ph·∫£i placeholder)
                    for email in emails:
                        if not any(placeholder in email.lower() for placeholder in ['example', 'test', 'sample']):
                            company_info['email'] = email
                            print(f"   ‚úÖ Email: {email}")
                            break
            
            # T√¨m s·ªë ƒëi·ªán tho·∫°i n·∫øu ch∆∞a c√≥
            if not company_info['dien_thoai']:
                phone = self._extract_valid_phone(full_text)
                if phone:
                    company_info['dien_thoai'] = phone
                    print(f"   ‚úÖ ƒêi·ªán tho·∫°i t·ª´ text: {phone}")
        
        except Exception as e:
            print(f"   ‚ö†Ô∏è L·ªói tr√≠ch xu·∫•t li√™n h·ªá: {e}")
    
    async def _extract_main_business_activity(self, page, company_info: Dict[str, Any]):
        """Tr√≠ch xu·∫•t ng√†nh ngh·ªÅ kinh doanh ch√≠nh x√°c"""
        try:
            activities = []
            
            # T√¨m section ch·ª©a ng√†nh ngh·ªÅ c·ªßa c√¥ng ty hi·ªán t·∫°i
            business_sections = await page.query_selector_all(
                "div:has-text('Ng√†nh ngh·ªÅ'), section:has-text('Ng√†nh ngh·ªÅ'), .business-activity"
            )
            
            for section in business_sections:
                try:
                    section_text = await section.inner_text()
                    
                    # Ch·ªâ l·∫•y ng√†nh ngh·ªÅ li√™n quan ƒë·∫øn c√¥ng ty hi·ªán t·∫°i
                    if company_info['ten_cong_ty'] and company_info['ten_cong_ty'] in section_text:
                        # T√¨m c√°c list items trong section n√†y
                        list_items = await section.query_selector_all("li")
                        for item in list_items:
                            text = await item.inner_text()
                            if self._is_valid_business_activity(text):
                                activities.append(text.strip())
                except:
                    continue
            
            # Fallback: t√¨m t·ª´ t·∫•t c·∫£ li elements nh∆∞ng filter k·ªπ h∆°n
            if not activities:
                all_items = await page.query_selector_all("ul li, ol li")
                for item in all_items:
                    try:
                        text = await item.inner_text()
                        if self._is_valid_business_activity(text):
                            activities.append(text.strip())
                    except:
                        continue
            
            # Lo·∫°i b·ªè duplicate v√† gi·ªõi h·∫°n s·ªë l∆∞·ª£ng
            unique_activities = []
            for activity in activities:
                if activity not in unique_activities and len(unique_activities) < 10:
                    unique_activities.append(activity)
            
            company_info['nganh_nghe_kinh_doanh_chi_tiet'] = unique_activities
            
            if unique_activities:
                print(f"   ‚úÖ Ng√†nh ngh·ªÅ chi ti·∫øt: {len(unique_activities)} items")
        
        except Exception as e:
            print(f"   ‚ö†Ô∏è L·ªói tr√≠ch xu·∫•t ng√†nh ngh·ªÅ: {e}")
    
    def _is_valid_business_activity(self, text: str) -> bool:
        """Ki·ªÉm tra xem c√≥ ph·∫£i ng√†nh ngh·ªÅ kinh doanh h·ª£p l·ªá kh√¥ng"""
        if not text or len(text.strip()) < 10 or len(text.strip()) > 300:
            return False
        
        text_lower = text.lower()
        
        # Ph·∫£i ch·ª©a t·ª´ kh√≥a kinh doanh
        business_keywords = [
            's·∫£n xu·∫•t', 'kinh doanh', 'd·ªãch v·ª•', 'b√°n', 'ph√¢n ph·ªëi', 
            'xu·∫•t nh·∫≠p kh·∫©u', 'th∆∞∆°ng m·∫°i', 'ch·∫ø t·∫°o', 'gia c√¥ng'
        ]
        
        has_business_keyword = any(keyword in text_lower for keyword in business_keywords)
        
        # Lo·∫°i b·ªè c√°c d√≤ng kh√¥ng ph·∫£i ng√†nh ngh·ªÅ
        invalid_indicators = [
            'm√£ s·ªë thu·∫ø', 'ƒë·ªãa ch·ªâ', 'ƒëi·ªán tho·∫°i', 'email', 'website',
            'ng∆∞·ªùi ƒë·∫°i di·ªán', 'gi√°m ƒë·ªëc', 'th√†nh l·∫≠p', 'v·ªën ƒëi·ªÅu l·ªá'
        ]
        
        has_invalid = any(indicator in text_lower for indicator in invalid_indicators)
        
        return has_business_keyword and not has_invalid
    
    def _validate_and_clean_final(self, company_info: Dict[str, Any], original_tax_code: str):
        """Validate v√† l√†m s·∫°ch d·ªØ li·ªáu cu·ªëi c√πng"""
        # ƒê·∫£m b·∫£o MST ƒë√∫ng
        if not company_info['ma_so_thue'] or company_info['ma_so_thue'] == original_tax_code:
            company_info['ma_so_thue'] = original_tax_code
        
        # L√†m s·∫°ch s·ªë ƒëi·ªán tho·∫°i (ƒë·∫£m b·∫£o kh√¥ng ph·∫£i MST)
        if company_info['dien_thoai'] == original_tax_code:
            company_info['dien_thoai'] = ""  # Reset n·∫øu nh·∫ßm l·∫´n v·ªõi MST
        
        # L√†m s·∫°ch t√™n c√¥ng ty
        if company_info['ten_cong_ty']:
            company_info['ten_cong_ty'] = self._clean_company_name(company_info['ten_cong_ty'])
        
        # L√†m s·∫°ch ƒë·ªãa ch·ªâ
        if company_info['dia_chi_thue']:
            # Lo·∫°i b·ªè whitespace th·ª´a
            company_info['dia_chi_thue'] = ' '.join(company_info['dia_chi_thue'].split())
    
    def save_to_file(self, tax_code: str, data: Dict[str, Any]):
        """L∆∞u k·∫øt qu·∫£ ra file JSON"""
        filename = f"company_enhanced_{tax_code}.json"
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print(f"   üíæ ƒê√£ l∆∞u: {filename}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è L·ªói l∆∞u file: {e}")

async def test_enhanced():
    """Test phi√™n b·∫£n n√¢ng c·∫•p ho√†n ch·ªânh"""
    tax_code = "0107634707"
    client = HSCTVNEnhanced()
    
    print(f"üß™ TEST PHI√äN B·∫¢N N√ÇNG C·∫§P HO√ÄN CH·ªàNH - MST: {tax_code}")
    print("=" * 70)
    
    result = await client.search_company(tax_code)
    
    if result:
        print("\n" + "=" * 70)
        print("üìã K·∫æT QU·∫¢ TR√çCH XU·∫§T N√ÇNG C·∫§P:")
        print("=" * 70)
        
        for key, value in result.items():
            if value:
                if isinstance(value, list):
                    print(f"{key}: {len(value)} items")
                    for i, item in enumerate(value[:3], 1):
                        print(f"  {i}. {item}")
                    if len(value) > 3:
                        print(f"  ... v√† {len(value) - 3} items kh√°c")
                else:
                    print(f"{key}: {value}")
        
        # L∆∞u k·∫øt qu·∫£
        client.save_to_file(tax_code, result)
        
        # Th·ªëng k√™
        filled_fields = sum(1 for v in result.values() if v and str(v).strip())
        print(f"\nüìä ƒê√£ tr√≠ch xu·∫•t {filled_fields}/{len(result)} tr∆∞·ªùng")
        
        # ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng
        quality_score = filled_fields / len(result) * 100
        print(f"üéØ ƒê·ªô ƒë·∫ßy ƒë·ªß th√¥ng tin: {quality_score:.1f}%")
        
        # ƒê√°nh gi√° c·ª• th·ªÉ ƒë·ªãa ch·ªâ
        if result['dia_chi_thue']:
            print(f"‚úÖ ƒê√£ tr√≠ch xu·∫•t ƒë∆∞·ª£c ƒë·ªãa ch·ªâ: {result['dia_chi_thue']}")
        else:
            print("‚ùå Ch∆∞a tr√≠ch xu·∫•t ƒë∆∞·ª£c ƒë·ªãa ch·ªâ")
            
    else:
        print("‚ùå Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c th√¥ng tin")

if __name__ == "__main__":
    asyncio.run(test_enhanced())