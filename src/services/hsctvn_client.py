import asyncio
import re
import json
import logging
from typing import Dict, Optional, Any
from playwright.async_api import async_playwright

# Configure logging
logger = logging.getLogger(__name__)

class HSCTVNEnhanced:
    """Client n√¢ng c·∫•p ƒë·ªÉ tr√≠ch xu·∫•t ƒë·∫ßy ƒë·ªß th√¥ng tin doanh nghi·ªáp"""
    
    def __init__(self):
        self.base_url = "https://hsctvn.com"
        
    async def search_company(self, tax_code: str) -> Optional[Dict[str, Any]]:
        """T√¨m ki·∫øm th√¥ng tin c√¥ng ty theo m√£ s·ªë thu·∫ø"""
        logger.info(f"üîç T√¨m ki·∫øm MST: {tax_code}")
        
        async with async_playwright() as pw:
            browser = await pw.chromium.launch(headless=True)
            context = await browser.new_context(
                user_agent=\'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\'
            )
            page = await context.new_page()
            
            try:
                # 1. Truy c·∫≠p trang ch·ªß
                logger.info("   üåê Truy c·∫≠p hsctvn.com...")
                await page.goto(self.base_url, timeout=30000)
                await page.wait_for_load_state("domcontentloaded")
                await page.wait_for_timeout(2000)
                
                # 2. T√¨m ki·∫øm
                logger.info(f"   üîç T√¨m ki·∫øm MST {tax_code}...")
                search_input = await page.query_selector("input[name=\'key\']")
                if not search_input:
                    logger.error("   ‚ùå Kh√¥ng t√¨m th·∫•y √¥ t√¨m ki·∫øm")
                    return None
                
                await search_input.fill(tax_code)
                await page.wait_for_timeout(1000)
                
                # Submit form
                submit_btn = await page.query_selector("input[type=\'submit\']")
                if submit_btn:
                    await submit_btn.click()
                else:
                    await search_input.press("Enter")
                
                # 3. Ch·ªù k·∫øt qu·∫£
                logger.info("   ‚è≥ Ch·ªù k·∫øt qu·∫£...")
                await page.wait_for_load_state("domcontentloaded")
                await page.wait_for_timeout(3000)
                
                # 4. T√¨m link k·∫øt qu·∫£ ch√≠nh x√°c v·ªõi MST
                result_link = await self._find_exact_result_link(page, tax_code)
                
                if result_link:
                    href = await result_link.get_attribute("href")
                    full_url = self._normalize_url(href)
                    
                    logger.info(f"   üîó Truy c·∫≠p chi ti·∫øt: {full_url}")
                    await page.goto(full_url, timeout=30000)
                    await page.wait_for_load_state("domcontentloaded")
                    await page.wait_for_timeout(3000)
                else:
                    logger.warning("   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y link ch√≠nh x√°c, th·ª≠ tr√≠ch xu·∫•t t·ª´ trang hi·ªán t·∫°i")
                
                # 5. Tr√≠ch xu·∫•t th√¥ng tin v·ªõi ph∆∞∆°ng ph√°p c·∫£i ti·∫øn
                logger.info("   üìä Tr√≠ch xu·∫•t th√¥ng tin n√¢ng c·∫•p...")
                company_info = await self._extract_enhanced_info(page, tax_code)
                
                # Debug information
                self._debug_extracted_info(company_info, tax_code)

                # Screenshot ƒë·ªÉ debug
                screenshot_path = f"enhanced_result_{tax_code}.png"
                await page.screenshot(path=screenshot_path)
                logger.info(f"   üì∏ Screenshot: {screenshot_path}")
                
                return company_info
                
            except Exception as e:
                logger.error(f"   ‚ùå L·ªói: {e}")
                error_screenshot_path = f"enhanced_error_{tax_code}.png"
                await page.screenshot(path=error_screenshot_path)
                logger.error(f"   üì∏ Error Screenshot: {error_screenshot_path}")
                return None
            finally:
                await browser.close()
    
    async def _find_exact_result_link(self, page, tax_code: str):
        """T√¨m link k·∫øt qu·∫£ ch√≠nh x√°c cho MST"""
        try:
            # T√¨m t·∫•t c·∫£ links trong b·∫£ng k·∫øt qu·∫£
            links = await page.query_selector_all("table a, .search-result a, a[href*=\'cong-ty\']")
            
            for link in links:
                try:
                    href = await link.get_attribute("href")
                    text = await link.inner_text()
                    
                    # T√¨m link c√≥ ch·ª©a MST trong href ho·∫∑c text
                    if href and (tax_code in href or tax_code in text):
                        if "cong-ty" in href and "danh-sach" not in href:
                            logger.info(f"   ‚úÖ T√¨m th·∫•y link ch√≠nh x√°c: {href}")
                            return link
                    
                    # Ho·∫∑c t√¨m link trong c√πng row v·ªõi MST
                    parent_row = await link.evaluate_handle("""
                        element => element.closest(\'tr\')
                    """)
                    
                    if parent_row:
                        row_text = await parent_row.inner_text()
                        if tax_code in row_text:
                            if "cong-ty" in href and "danh-sach" not in href:
                                logger.info(f"   ‚úÖ T√¨m th·∫•y link trong row ch·ª©a MST: {href}")
                                return link
                    
                except:
                    continue
            
            # Fallback: l·∫•y link ƒë·∫ßu ti√™n n·∫øu c√≥
            first_company_link = await page.query_selector("a[href*=\'cong-ty\']:not([href*=\'danh-sach\'])")
            if first_company_link:
                href = await first_company_link.get_attribute("href")
                logger.warning(f"   ‚ö†Ô∏è S·ª≠ d·ª•ng link ƒë·∫ßu ti√™n: {href}")
                return first_company_link
            
            return None
            
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è L·ªói t√¨m link: {e}")
            return None
    
    def _normalize_url(self, href: str) -> str:
        """Chu·∫©n h√≥a URL"""
        if href.startswith("/"):
            return f"{self.base_url}{href}"
        elif href.startswith("http"):
            return href
        else:
            return f"{self.base_url}/{href}"
    
    async def _extract_enhanced_info(self, page, tax_code: str) -> Dict[str, Any]:
        """Tr√≠ch xu·∫•t th√¥ng tin v·ªõi ph∆∞∆°ng ph√°p n√¢ng c·∫•p"""
        company_info = {
            \'ma_so_thue\': tax_code,
            \'ten_cong_ty\': \'\',
            \'dia_chi_thue\': \'\',
            \'dai_dien_phap_luat\': \'\',
            \'dien_thoai\': \'\',
            \'email\': \'\',
            \'ngay_cap\': \'\',
            \'nganh_nghe_chinh\': \'\',
            \'trang_thai\': \'\',
            \'cap_nhat_lan_cuoi\': \'\',
            \'nganh_nghe_kinh_doanh_chi_tiet\': []
        }
        
        try:
            # L·∫•y to√†n b·ªô text c·ªßa trang ƒë·ªÉ ph√¢n t√≠ch
            full_text = await page.inner_text("body")
            
            # 1. Tr√≠ch xu·∫•t t√™n c√¥ng ty t·ª´ ti√™u ƒë·ªÅ
            await self._extract_company_name(page, company_info)
            
            # 2. Tr√≠ch xu·∫•t th√¥ng tin t·ª´ text pattern (ph∆∞∆°ng ph√°p m·ªõi)
            await self._extract_info_from_text_patterns(full_text, company_info)
            
            # 3. Tr√≠ch xu·∫•t t·ª´ b·∫£ng (ph∆∞∆°ng ph√°p c≈© v·∫´n gi·ªØ ƒë·ªÉ b·ªï sung)
            await self._extract_detailed_table_info(page, company_info)
            
            # 4. Tr√≠ch xu·∫•t th√¥ng tin li√™n h·ªá
            await self._extract_contact_info(page, company_info)
            
            # 5. Tr√≠ch xu·∫•t ng√†nh ngh·ªÅ
            await self._extract_main_business_activity(page, company_info)
            
            # 6. Validate v√† l√†m s·∫°ch d·ªØ li·ªáu
            self._validate_and_clean_final(company_info, tax_code)
            
            return company_info
            
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è L·ªói tr√≠ch xu·∫•t: {e}")
            return company_info
    
    def has_meaningful_data(self, hsctvn_data: Dict[str, Any]) -> bool:
        """
        Ki·ªÉm tra d·ªØ li·ªáu HSCTVN c√≥ th·ª±c s·ª± h·ªØu √≠ch hay kh√¥ng.
        Y√™u c·∫ßu √≠t nh·∫•t 2 tr∆∞·ªùng quan tr·ªçng: t√™n c√¥ng ty v√† ƒë·ªãa ch·ªâ.
        """
        required_fields = ['ten_cong_ty', 'dia_chi_thue']
        meaningful_count = sum(1 for field in required_fields
                              if field in hsctvn_data and hsctvn_data[field])
        return meaningful_count >= 2

    def _calculate_quality_score(self, company_info: Dict[str, Any]) -> int:
        """
        T√≠nh to√°n ƒëi·ªÉm ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu tr√≠ch xu·∫•t.
        """
        score = 0
        if company_info.get('ten_cong_ty'):
            score += 30
        if company_info.get('dia_chi_thue'):
            score += 30
        if company_info.get('dai_dien_phap_luat'):
            score += 15
        if company_info.get('dien_thoai'):
            score += 10
        if company_info.get('email'):
            score += 5
        if company_info.get('ngay_cap'):
            score += 5
        if company_info.get('nganh_nghe_chinh'):
            score += 5
        return score

    def _debug_extracted_info(self, company_info: Dict[str, Any], tax_code: str):
        """
        In chi ti·∫øt th√¥ng tin ƒë√£ extract ƒë∆∞·ª£c t·ª´ HSCTVN.
        ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu v√† ghi log chi ti·∫øt.
        """
        logger.info(f"=== DEBUG HSCTVN cho MST: {tax_code} ===")
        for key, value in company_info.items():
            logger.info(f"{key}: {value} ({'C√≥ d·ªØ li·ªáu' if value else 'Tr·ªëng'})")
        quality_score = self._calculate_quality_score(company_info)
        logger.info(f"Quality Score: {quality_score}/100")

    async def _extract_info_from_text_patterns(self, full_text: str, company_info: Dict[str, Any]):
        """Ph∆∞∆°ng ph√°p m·ªõi: tr√≠ch xu·∫•t th√¥ng tin t·ª´ text patterns"""
        try:
            lines = full_text.split('\n')
            
            for i, line in enumerate(lines):
                line_clean = line.strip()
                if not line_clean:
                    continue
                
                # ƒê·ªãa ch·ªâ thu·∫ø - pattern m·ªõi
                if \'ƒë·ªãa ch·ªâ thu·∫ø:\' in line_clean.lower():
                    address_match = re.search(r\'ƒë·ªãa ch·ªâ thu·∫ø:\s*(.+)\\' , line_clean, re.IGNORECASE)
                    if address_match:
                        address = address_match.group(1).strip()
                        if len(address) > 5:  # ƒêi·ªÅu ki·ªán √≠t kh·∫Øt khe h∆°n
                            company_info[\'dia_chi_thue\'] = address
                            logger.info(f"   ‚úÖ ƒê·ªãa ch·ªâ thu·∫ø: {address}")
                
                # ƒê·∫°i di·ªán ph√°p lu·∫≠t
                elif \'ƒë·∫°i di·ªán ph√°p lu·∫≠t:\' in line_clean.lower():
                    rep_match = re.search(r\'ƒë·∫°i di·ªán ph√°p lu·∫≠t:\s*(.+)\\' , line_clean, re.IGNORECASE)
                    if rep_match:
                        rep = rep_match.group(1).strip()
                        if len(rep) > 2 and not any(char.isdigit() for char in rep):
                            company_info[\'dai_dien_phap_luat\'] = rep
                            logger.info(f"   ‚úÖ ƒê·∫°i di·ªán ph√°p lu·∫≠t: {rep}")
                
                # ƒêi·ªán tho·∫°i
                elif \'ƒëi·ªán tho·∫°i:\' in line_clean.lower():
                    phone_match = re.search(r\'ƒëi·ªán tho·∫°i:\s*(.+)\\' , line_clean, re.IGNORECASE)
                    if phone_match:
                        phone_text = phone_match.group(1).strip()
                        phone = self._extract_valid_phone(phone_text)
                        if phone and phone != company_info[\'ma_so_thue\']:
                            company_info[\'dien_thoai\'] = phone
                            logger.info(f"   ‚úÖ ƒêi·ªán tho·∫°i: {phone}")
                
                # Ng√†y c·∫•p
                elif \'ng√†y c·∫•p:\' in line_clean.lower():
                    date_match = re.search(r\'ng√†y c·∫•p:\s*(.+)\\' , line_clean, re.IGNORECASE)
                    if date_match:
                        date_text = date_match.group(1).strip()
                        if self._is_valid_date(date_text):
                            company_info[\'ngay_cap\'] = date_text
                            logger.info(f"   ‚úÖ Ng√†y c·∫•p: {date_text}")
                
                # Ng√†nh ngh·ªÅ ch√≠nh
                elif \'ng√†nh ngh·ªÅ ch√≠nh:\' in line_clean.lower():
                    business_match = re.search(r\'ng√†nh ngh·ªÅ ch√≠nh:\s*(.+)\\' , line_clean, re.IGNORECASE)
                    if business_match:
                        business = business_match.group(1).strip()
                        if len(business) > 5:
                            company_info[\'nganh_nghe_chinh\'] = business
                            logger.info(f"   ‚úÖ Ng√†nh ngh·ªÅ ch√≠nh: {business}")
                
                # Tr·∫°ng th√°i  
                elif \'tr·∫°ng th√°i:\' in line_clean.lower():
                    status_match = re.search(r\'tr·∫°ng th√°i:\s*(.+)\\' , line_clean, re.IGNORECASE)
                    if status_match:
                        status = status_match.group(1).strip()
                        company_info[\'trang_thai\'] = status
                        logger.info(f"   ‚úÖ Tr·∫°ng th√°i: {status}")
                
                # T√¨m c√°c pattern kh√°c t·ª´ c√°c d√≤ng li·ªÅn k·ªÅ
                elif any(keyword in line_clean.lower() for keyword in [\'s·ªë\', \'l√¥\', \'ƒë∆∞·ªùng\', \'ph∆∞·ªùng\', \'qu·∫≠n\', \'th√†nh ph·ªë\', \'t·ªânh\']):
                    # C√≥ th·ªÉ l√† ƒë·ªãa ch·ªâ n·∫øu ch∆∞a c√≥
                    if not company_info[\'dia_chi_thue\'] and len(line_clean) > 15:
                        # Ki·ªÉm tra xem c√≥ ph·∫£i l√† ƒë·ªãa ch·ªâ kh√¥ng
                        if self._looks_like_address(line_clean):
                            company_info[\'dia_chi_thue\'] = line_clean
                            logger.info(f"   ‚úÖ ƒê·ªãa ch·ªâ (pattern): {line_clean}")
        
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è L·ªói tr√≠ch xu·∫•t t·ª´ text: {e}")
    
    def _looks_like_address(self, text: str) -> bool:
        """Ki·ªÉm tra xem text c√≥ gi·ªëng ƒë·ªãa ch·ªâ kh√¥ng"""
        address_indicators = [\'s·ªë\', \'l√¥\', \'ƒë∆∞·ªùng\', \'ph∆∞·ªùng\', \'qu·∫≠n\', \'th√†nh ph·ªë\', \'t·ªânh\', \'x√£\', \'huy·ªán\']
        text_lower = text.lower()
        
        # Ph·∫£i c√≥ √≠t nh·∫•t 2 indicator
        count = sum(1 for indicator in address_indicators if indicator in text_lower)
        
        # Kh√¥ng ƒë∆∞·ª£c ch·ª©a c√°c t·ª´ kh√¥ng ph·∫£i ƒë·ªãa ch·ªâ
        non_address = [\'m√£ s·ªë thu·∫ø\', \'ƒëi·ªán tho·∫°i\', \'email\', \'ng√†y\', \'nƒÉm\', \'th√°ng\']
        has_non_address = any(word in text_lower for word in non_address)
        
        return count >= 2 and not has_non_address and len(text) > 15
    
    async def _extract_company_name(self, page, company_info: Dict[str, Any]):
        """Tr√≠ch xu·∫•t t√™n c√¥ng ty t·ª´ c√°c ngu·ªìn ƒë√°ng tin c·∫≠y"""
        try:
            # Th·ª© t·ª± ∆∞u ti√™n: h1 -> title -> h2
            selectors = [\'h1\', \'title\', \'h2\', \'.company-name\', \'.title\']
            
            for selector in selectors:
                try:
                    if selector == \'title\':
                        text = await page.title()
                    else:
                        element = await page.query_selector(selector)
                        if element:
                            text = await element.inner_text()
                        else:
                            continue
                    
                    if text and len(text.strip()) > 5:
                        # L√†m s·∫°ch t√™n c√¥ng ty
                        clean_name = self._clean_company_name(text.strip())
                        if clean_name:
                            company_info[\'ten_cong_ty\'] = clean_name
                            logger.info(f"   ‚úÖ T√™n c√¥ng ty: {clean_name}")
                            return
                except:
                    continue
                    
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è L·ªói tr√≠ch xu·∫•t t√™n: {e}")
    
    def _clean_company_name(self, text: str) -> str:
        """L√†m s·∫°ch t√™n c√¥ng ty"""
        # Lo·∫°i b·ªè c√°c ti·ªÅn t·ªë kh√¥ng c·∫ßn thi·∫øt
        text = re.sub(r\'^(Th√¥ng tin|Chi ti·∫øt|Detail|Info|Company)\s*[:]\s*\', \'\', text, flags=re.IGNORECASE)
        
        # Lo·∫°i b·ªè th√¥ng tin website
        text = re.sub(r\'\s*-[^-]*hsctvn[^-]*$\' , \'\', text, flags=re.IGNORECASE)
        
        # Lo·∫°i b·ªè th√¥ng tin s·ªë l∆∞·ª£ng h·ªì s∆°
        text = re.sub(r\'\s*\|\s*\d+[,.\s]*\d*\s*h·ªì s∆°.*$\' , \'\', text, flags=re.IGNORECASE)
        
        return text.strip()
    
    async def _extract_detailed_table_info(self, page, company_info: Dict[str, Any]):
        """Tr√≠ch xu·∫•t th√¥ng tin chi ti·∫øt t·ª´ b·∫£ng (ph∆∞∆°ng ph√°p c≈© ƒë·ªÉ b·ªï sung)"""
        try:
            main_tables = await page.query_selector_all("table")
            
            for table in main_tables:
                rows = await table.query_selector_all("tr")
                
                for row in rows:
                    cells = await row.query_selector_all("td, th")
                    if len(cells) >= 2:
                        try:
                            label_elem = cells[0]
                            value_elem = cells[1]
                            
                            label = await label_elem.inner_text()
                            value = await value_elem.inner_text()
                            
                            self._map_table_field(label.strip(), value.strip(), company_info)
                            
                        except:
                            continue
        
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è L·ªói tr√≠ch xu·∫•t b·∫£ng: {e}")
    
    def _map_table_field(self, label: str, value: str, company_info: Dict[str, Any]):
        """Map field t·ª´ b·∫£ng v√†o company_info v·ªõi ƒëi·ªÅu ki·ªán √≠t kh·∫Øt khe h∆°n"""
        if not label or not value or len(value) < 2:
            return
        
        label_lower = label.lower().strip()
        value_clean = value.strip()
        
        # ƒê·ªãa ch·ªâ v·ªõi ƒëi·ªÅu ki·ªán √≠t kh·∫Øt khe h∆°n
        if any(kw in label_lower for kw in [\'ƒë·ªãa ch·ªâ\', \'address\']) and len(value_clean) > 10:
            if not company_info[\'dia_chi_thue\']:  # Ch·ªâ set n·∫øu ch∆∞a c√≥
                company_info[\'dia_chi_thue\'] = value_clean
                logger.info(f"   ‚úÖ ƒê·ªãa ch·ªâ (b·∫£ng): {value_clean}")
        
        # ƒê·∫°i di·ªán ph√°p lu·∫≠t
        elif any(kw in label_lower for kw in [\'ƒë·∫°i di·ªán ph√°p lu·∫≠t\', \'gi√°m ƒë·ªëc\', \'legal representative\', \'director\']):
            if len(value_clean) > 2 and not any(char.isdigit() for char in value_clean):
                if not company_info[\'dai_dien_phap_luat\']:
                    company_info[\'dai_dien_phap_luat\'] = value_clean
                    logger.info(f"   ‚úÖ ƒê·∫°i di·ªán ph√°p lu·∫≠t (b·∫£ng): {value_clean}")
        
        # ƒêi·ªán tho·∫°i
        elif any(kw in label_lower for kw in [\'ƒëi·ªán tho·∫°i\', \'phone\', \'tel\']):
            phone = self._extract_valid_phone(value_clean)
            if phone and phone != company_info[\'ma_so_thue\']:
                if not company_info[\'dien_thoai\']:
                    company_info[\'dien_thoai\'] = phone
                    logger.info(f"   ‚úÖ ƒêi·ªán tho·∫°i (b·∫£ng): {phone}")
        
        # Email
        elif any(kw in label_lower for kw in [\'email\']):
            if self._is_valid_email(value_clean):
                if not company_info[\'email\']:
                    company_info[\'email\'] = value_clean
                    logger.info(f"   ‚úÖ Email (b·∫£ng): {value_clean}")
        
        # Ng√†y c·∫•p
        elif any(kw in label_lower for kw in [\'ng√†y c·∫•p\', \'ng√†y th√†nh l·∫≠p\', \'ng√†y ƒëƒÉng k√Ω\', \'date of issue\']):
            if self._is_valid_date(value_clean):
                if not company_info[\'ngay_cap\']:
                    company_info[\'ngay_cap\'] = value_clean
                    logger.info(f"   ‚úÖ Ng√†y c·∫•p (b·∫£ng): {value_clean}")
        
        # Ng√†nh ngh·ªÅ ch√≠nh
        elif any(kw in label_lower for kw in [\'ng√†nh ngh·ªÅ ch√≠nh\', \'lƒ©nh v·ª±c ho·∫°t ƒë·ªông\', \'main business\']):
            if len(value_clean) > 5:
                if not company_info[\'nganh_nghe_chinh\']:
                    company_info[\'nganh_nghe_chinh\'] = value_clean
                    logger.info(f"   ‚úÖ Ng√†nh ngh·ªÅ ch√≠nh (b·∫£ng): {value_clean}")
        
        # Tr·∫°ng th√°i
        elif any(kw in label_lower for kw in [\'tr·∫°ng th√°i\', \'status\']):
            if len(value_clean) > 2:
                if not company_info[\'trang_thai\']:
                    company_info[\'trang_thai\'] = value_clean
                    logger.info(f"   ‚úÖ Tr·∫°ng th√°i (b·∫£ng): {value_clean}")

    async def _extract_contact_info(self, page, company_info: Dict[str, Any]):
        """Tr√≠ch xu·∫•t th√¥ng tin li√™n h·ªá t·ª´ c√°c th·∫ª p, div"""
        try:
            content_div = await page.query_selector(".content") # Ho·∫∑c selector ch·ª©a th√¥ng tin ch√≠nh
            if content_div:
                text_content = await content_div.inner_text()
                
                # Phone
                phone_match = re.search(r\'ƒêi·ªán tho·∫°i:\s*([\d\s\.\-]+)\' , text_content)
                if phone_match:
                    phone = self._extract_valid_phone(phone_match.group(1))
                    if phone and not company_info[\'dien_thoai\']:
                        company_info[\'dien_thoai\'] = phone
                        logger.info(f"   ‚úÖ ƒêi·ªán tho·∫°i (content): {phone}")
                
                # Email
                email_match = re.search(r\'Email:\s*([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})\', text_content)
                if email_match:
                    if self._is_valid_email(email_match.group(1)) and not company_info[\'email\']:
                        company_info[\'email\'] = email_match.group(1)
                        logger.info(f"   ‚úÖ Email (content): {company_info[\'email\']}")
        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è L·ªói tr√≠ch xu·∫•t li√™n h·ªá: {e}")

    async def _extract_main_business_activity(self, page, company_info: Dict[str, Any]):
        """Tr√≠ch xu·∫•t ng√†nh ngh·ªÅ ch√≠nh v√† chi ti·∫øt"""
        try:
            # Ng√†nh ngh·ªÅ ch√≠nh
            main_business_elem = await page.query_selector("p:has-text(\'Ng√†nh ngh·ªÅ ch√≠nh:\') strong")
            if main_business_elem:
                main_business = await main_business_elem.inner_text()
                if main_business and not company_info[\'nganh_nghe_chinh\']:
                    company_info[\'nganh_nghe_chinh\'] = main_business.strip()
                    logger.info(f"   ‚úÖ Ng√†nh ngh·ªÅ ch√≠nh (selector): {main_business.strip()}")
            
            # Ng√†nh ngh·ªÅ kinh doanh chi ti·∫øt (t·ª´ b·∫£ng)
            detail_table = await page.query_selector("table.table-bordered") # Selector cho b·∫£ng ng√†nh ngh·ªÅ chi ti·∫øt
            if detail_table:
                rows = await detail_table.query_selector_all("tr")
                detailed_activities = []
                for row in rows[1:]: # B·ªè qua header
                    cols = await row.query_selector_all("td")
                    if len(cols) > 1:
                        activity = await cols[1].inner_text() # C·ªôt th·ª© 2 th∆∞·ªùng l√† t√™n ng√†nh ngh·ªÅ
                        if activity.strip():
                            detailed_activities.append(activity.strip())
                if detailed_activities:
                    company_info[\'nganh_nghe_kinh_doanh_chi_tiet\'] = detailed_activities
                    logger.info(f"   ‚úÖ Ng√†nh ngh·ªÅ chi ti·∫øt: {detailed_activities[:3]}...")

        except Exception as e:
            logger.warning(f"   ‚ö†Ô∏è L·ªói tr√≠ch xu·∫•t ng√†nh ngh·ªÅ: {e}")

    def _validate_and_clean_final(self, company_info: Dict[str, Any], tax_code: str):
        """
        Ki·ªÉm tra v√† l√†m s·∫°ch d·ªØ li·ªáu cu·ªëi c√πng.
        """
        # ƒê·∫£m b·∫£o m√£ s·ªë thu·∫ø lu√¥n ƒë√∫ng
        company_info[\'ma_so_thue\'] = tax_code

        # L√†m s·∫°ch c√°c tr∆∞·ªùng r·ªóng
        for key, value in company_info.items():
            if isinstance(value, str):
                company_info[key] = value.strip()
            elif isinstance(value, list):
                company_info[key] = [item.strip() for item in value if item.strip()]

        # Lo·∫°i b·ªè c√°c tr∆∞·ªùng kh√¥ng c·∫ßn thi·∫øt ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu
        keys_to_remove = [key for key, value in company_info.items() if not value and key != 'nganh_nghe_kinh_doanh_chi_tiet']
        for key in keys_to_remove:
            del company_info[key]

        # N·∫øu ng√†nh ngh·ªÅ chi ti·∫øt r·ªóng, x√≥a n√≥
        if not company_info.get('nganh_nghe_kinh_doanh_chi_tiet'):
            company_info.pop('nganh_nghe_kinh_doanh_chi_tiet', None)

    def _extract_valid_phone(self, text: str) -> Optional[str]:
        """
        Tr√≠ch xu·∫•t s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá t·ª´ chu·ªói.
        """
        phone_numbers = re.findall(r\'\b(0\d{9,10}|\+84\d{9,10})\b\', text)
        if phone_numbers:
            return phone_numbers[0]
        return None

    def _is_valid_email(self, email: str) -> bool:
        """
        Ki·ªÉm tra ƒë·ªãnh d·∫°ng email h·ª£p l·ªá.
        """
        return re.match(r\'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$\' , email) is not None

    def _is_valid_date(self, date_str: str) -> bool:
        """
        Ki·ªÉm tra ƒë·ªãnh d·∫°ng ng√†y th√°ng h·ª£p l·ªá (DD/MM/YYYY ho·∫∑c DD-MM-YYYY).
        """
        return re.match(r\'^(?:\d{1,2}[-/]\d{1,2}[-/]\d{4}|\d{4}[-/]\d{1,2}[-/]\d{1,2})$\', date_str) is not None


# Example Usage (for testing purposes)
async def main():
    logging.basicConfig(level=logging.INFO)
    client = HSCTVNEnhanced()

    tax_codes = ["0100109106", "0100109106-001", "0100109106-002", "0100109106-003"]

    for tax_code in tax_codes:
        company_info = await client.search_company(tax_code)
        if company_info:
            logger.info(f"\n--- K·∫øt qu·∫£ tr√≠ch xu·∫•t cho MST {tax_code} ---")
            for key, value in company_info.items():
                logger.info(f"{key}: {value}")
        else:
            logger.info(f"\n--- Kh√¥ng t√¨m th·∫•y th√¥ng tin cho MST {tax_code} ---")

if __name__ == "__main__":
    asyncio.run(main())
